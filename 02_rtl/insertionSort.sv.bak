// module insertionSort #(
//     parameter SIZE_DATA  = 8,
//     parameter NUMBER_ARR = 8
// )(
//     input  logic                     i_clk,
//     input  logic                     i_rst_n,
//     input  logic                     i_start,
//     input  logic [SIZE_DATA-1:0]     i_data [NUMBER_ARR],
//     output logic [SIZE_DATA-1:0]     o_data [NUMBER_ARR],
//     output logic                     o_done
// );

// endmodule
module insertionSort #(
    parameter NUM_VALS = 5,
    parameter SIZE     = 16
)(  input  wire clk,
    input  wire [NUM_VALS*SIZE-1:0] in,
    output reg  [NUM_VALS*SIZE-1:0] out
);
    reg [NUM_VALS*SIZE-1:0] sorted_bus;
    always @(posedge clk) begin
        out <= sorted_bus;
    end

    integer i, j;
    reg [SIZE-1:0] temp;
    reg [SIZE-1:0] array [1:NUM_VALS];
    always @* begin
        for (i = 0; i < NUM_VALS; i = i + 1) begin
            array[i+1] = in[i*SIZE +: SIZE];
        end

        for (j = 2; j < NUM_VALS + 1; j = j + 1) begin
				i = j-1;
				temp = array[j];
            while((i > 0)&&(temp < array[i])) begin
                    array[i+1] = array[i];
						  i=i-1;
						  end
				array[i+1]=temp;
            end    
       for (i = 0; i < NUM_VALS; i = i + 1) begin
            sorted_bus[i*SIZE +: SIZE] = array[i+1];
       end
    end
endmodule